version: 2.1

jobs:
  test-java:  # Job pour exécuter les tests et générer la couverture de code
    docker:
      - image: cimg/openjdk:11.0  # Utilisez cimg/openjdk:8.0 si Java 8 est nécessaire
    steps:
      - checkout  # Récupère le code source
      - run:
          name: Calculate cache key
          command: |-
            find . -name 'pom.xml' -o -name 'gradlew*' -o -name '*.gradle*' | \
                    sort | xargs cat > /tmp/CIRCLECI_CACHE_KEY
      - restore_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}  # Restaure le cache en utilisant le checksum
      - run:
          name: Run Maven Tests with Coverage
          command: mvn verify  # Exécute les tests Maven avec JaCoCo
      - store_test_results:
          path: target/surefire-reports  # Sauvegarde les résultats des tests
      - store_artifacts:
          path: target/site/jacoco  # Sauvegarde le rapport de couverture généré par JaCoCo
      - save_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}  # Sauvegarde le cache pour les dépendances Maven
          paths:
            - ~/.m2/repository  # Cache les dépendances Maven pour une exécution plus rapide

      # Publier les rapports de couverture sur Codecov
      - run:
          name: Upload to Codecov
          command: |
            curl -s https://codecov.io/bash > /tmp/codecov  # Télécharge le script de Codecov
            bash /tmp/codecov  # Exécute le script pour uploader les résultats de couverture

  checkstyle:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - run:
          name: Run CheckStyle
          command: mvn checkstyle:checkstyle  # Exécute le plugin CheckStyle
      - store_artifacts:
          path: target/site/checkstyle.html  # Sauvegarde le rapport CheckStyle HTML
      - store_artifacts:
          path: target/checkstyle-result.xml  # Sauvegarde le rapport CheckStyle XML
      - run:
          name: Generate CheckStyle Badge
          command: |
            if [ -f target/checkstyle-result.xml ]; then
              ERRORS=$(grep -o '<error ' target/checkstyle-result.xml | wc -l)  # Compte les erreurs
              if [ "$ERRORS" -gt 0 ]; then
                COLOR="red"
              else
                COLOR="brightgreen"
              fi
              # Crée le badge
              curl -s https://img.shields.io/badge/CheckStyle-$ERRORS%20Errors-$COLOR > badges/checkstyle-badge.svg
            else
              echo "CheckStyle report not found. Skipping badge generation."
            fi
      - run:
          name: Commit Badge to Repo
          command: |
            git config --global user.email "circleci-bot@example.com"
            git config --global user.name "CircleCI Bot"
            git add badges/checkstyle-badge.svg
            git commit -m "Update CheckStyle Badge [skip ci]" || echo "No changes to commit"
            git push origin $(git rev-parse --abbrev-ref HEAD) || echo "Nothing to push"

workflows:
  build-and-upload:  # Workflow pour construire, tester et uploader les résultats
    jobs:
      - test-java:  # Le job test-java s'exécute
          filters:
            branches:
              only:
                - master  # Exécute le job uniquement sur la branche master
      - checkstyle:  # Exécute le job CheckStyle
          filters:
            branches:
              only:
                - master
